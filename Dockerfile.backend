# Base stage
FROM node:18-alpine AS base

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    sqlite \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY backend/package*.json ./

# Development stage
FROM base AS development

# Install all dependencies (including dev dependencies)
RUN npm ci

# Copy source code
COPY backend/ ./

# Create necessary directories
RUN mkdir -p data uploads logs

# Create non-root user and set permissions
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 backend \
    && chown -R backend:nodejs /app

USER backend

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:5000/api/health || node healthcheck.js || exit 1

# Start development server with nodemon
CMD ["npm", "run", "dev"]

# Dependencies stage for production
FROM base AS deps

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache \
    sqlite \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Set environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Create non-root user
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 backend

# Copy production dependencies
COPY --from=deps --chown=backend:nodejs /app/node_modules ./node_modules

# Copy source code
COPY --chown=backend:nodejs backend/ ./

# Create necessary directories with proper permissions
RUN mkdir -p data uploads logs \
    && chown -R backend:nodejs /app

# Generate Prisma client for production
RUN npx prisma generate

USER backend

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:5000/api/health || node healthcheck.js || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server.js"]
